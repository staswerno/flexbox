* {
	box-sizing: border-box;
	margin: 0;
	padding: 0;
}

body {
	font-family: Verdana, Geneva, Tahoma, sans-serif;
	background-color: lightgray;
	color: hotpink;
	height: 100vh;
	font-size: xx-large;
	display: flex;
	justify-content: center;
	align-items: center;
}

// container properties

// flex-direction: row | row-reverse | column | column-reverse
// flex-wrap: nowrap | wrap | wrap-reverse
// flex flow is shorthand for direction and wrap

// justify-content: flex-start | flex-end | center | space-between
// | space-around | space-evenly | start | end | left | right ... + safe | unsafe;
// safest browser compatible values are: flex-start | flex-end | center

// align-items: stretch | flex-start | flex-end | center | baseline
// | first baseline | last baseline | start | end | self-start | self-end + ... safe | unsafe;

// align-content: flex-start | flex-end | center | space-between
// | space-around | space-evenly | stretch | start | end | baseline | first baseline | last baseline + ... safe | unsafe;
// align content only works on multi line

// to understand align items vs align content, set:
// align-items: center && align-content: space around
// and comment in/out align-items
// align-content determines the spacing between lines
// align-items determines how the items as a whole are aligned within the container.

// gap only applies spacing between items, not outer edge
// minimum gutter. if space between, for eg, is bigger, it wins

.container {
	background-color: hotpink;
	padding: 10px;
	width: 80vw;
	height: 80vh;
	overflow: hidden;

	// flex properties below

	display: flex;
	flex-direction: row;
	flex-wrap: wrap;
	//	flex-flow: column wrap;
	justify-content: center;
	align-items: center;
	align-content: space;
	// gap: 70px;
	gap: 50px 20px;
	// row-gap: 70px;
	//column-gap: 70px;
}

.item {
	min-width: 200px;
	height: 200px;
	margin: 10px;
	background-color: aquamarine;
	display: flex;
	justify-content: center;
	align-items: center;
}

#item3 {
	min-height: 300px;
}
